{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description": "Forward WES requests to DNAnexus, converting to their API.",
    "Parameters": {
        "LambdaCodeBucket": {
            "Type": "String",
            "Description": "S3 bucket with the lambda code zip file."
        },
        "LambdaCodeKey": {
            "Type": "String",
            "Description": "Path within the bucket to the zip file."
        }
    },
    "Resources": {
        "LambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "lambda-role"]]},
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["lambda.amazonaws.com"]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "Path": "/"
            }
        },
        "LambdaPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "lambda-policy"]]},
                "Roles": [{"Ref": "LambdaRole"}],
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [ 
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": "arn:aws:logs:*:*:*"
                        }
                    ]
                }
            }
        },
        "WorkflowsPostFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Convert a WES /worfklows POST to a DNAnexus workflow run.",
				"Code": {
                    "S3Bucket": {"Ref": "LambdaCodeBucket"},
                    "S3Key": {"Ref": "LambdaCodeKey"}
                },
                "FunctionName": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "workflows-post-lambda-fn"]]},
                "Handler": "dx_wes.dnanexus_workflows_post",
                "Role": {"Fn::GetAtt": ["LambdaRole", "Arn"]},
                "Runtime": "python2.7",
                "Timeout": 30,
                "MemorySize": 1024
            }
        },
        "DXWESApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "rest-api"]]},
                "Description": "Accepts WES requests and delegates them to DNAnexus.",
                "Body": {
                    "swagger": "2.0",
                    "info": {
                        "title": "DNAnexus WES API",
                        "version": "0.0.1"
                    },
                    "schemes": ["https"],
                    "consumes": ["application/json"],
                    "produces": ["application/json"],
                    "definitions": {
                        "empty": {
                            "type": "object"
                        },
                        "error": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "type": {
                                    "type": "string"
                                },
                                "request-id": {
                                    "type": "string"
                                }
                            }
                        },
                        "Ga4ghWesWorkflowRequest": {
                            "type": "object",
                            "properties": {
                                "workflow_descriptor": {
                                    "type": "string"
                                },
                                "workflow_params": {
                                    "type": "string"
                                },
                                "workflow_type": {
                                      "type": "string"
                                },
                                "workflow_type_version": {
                                      "type": "string"
                                },
                                "key_values": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                }
                              }
                        },
                        "Ga4ghWesWorkflowRunId": {
                            "type": "object",
                            "properties": {
                                "workflow_id": {
                                    "type": "string"
                                }
                            }
                        },
                        "Ga4ghWesState": {
                            "type": "string",
                            "enum": [
                                "Unknown",
                                "Queued",
                                "Running",
                                "Paused",
                                "Complete",
                                "Error",
                                "SystemError",
                                "Canceled",
                                "Initializing"
                            ],
                            "default": "Unknown"
                        },
                        "Ga4ghWesWorkflowStatus": {
                            "type": "object",
                            "properties": {
                                "workflow_id": {
                                    "type": "string"
                                },
                                "state": {
                                    "$ref": "#/definitions/Ga4ghWesState"
                                }
                            }
                        }
                    },
                    "paths": {
                        "/workflows": {
                            "post": {
                                "parameters": [
                                    {
                                        "name": "body",
                                        "in": "body",
                                         "required": true,
                                         "schema": {
                                            "$ref": "#/definitions/Ga4ghWesWorkflowRequest"
                                         }
                                    },
                                    {
                                        "name": "Authorization",
                                        "in": "header",
                                        "required": true,
                                        "type": "string"
                                    }
                                ],
                                "responses": {
                                    "201": {
                                        "description": "",
                                        "schema": {
                                            "$ref": "#/definitions/Ga4ghWesWorkflowRunId"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "type": "aws",
                                    "uri": {"Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:apigateway:",
                                            {"Ref": "AWS::Region"},
                                            ":lambda:path",
                                            "/2015-03-31/functions/",
                                            {"Fn::GetAtt": ["WorkflowsPostFunction", "Arn"]},
                                            "/invocations"
                                        ]
                                    ]},
                                    "requestTemplates": {
                                        "application/json": "{\n    \"method\": \"$context.httpMethod\",\n    \"body\" : $input.json('$'),\n    \"headers\": {\n        #foreach($param in $input.params().header.keySet())\n        \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\"\n        #if($foreach.hasNext),#end\n        #end\n    }\n}"
                                    },
                                    "httpMethod": "POST",
                                    "passthroughBehavior": "when_no_match",
                                    "responses": {
                                        "default": {
                                            "statusCode": "201"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "WorkflowsPostPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {"Fn::GetAtt": ["WorkflowsPostFunction", "Arn"]},
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {"Fn::Join": ["", [
                    "arn:aws:execute-api:",
                    {"Ref": "AWS::Region"},
                    ":",
                    {"Ref": "AWS::AccountId"},
                    ":",
                    {"Ref": "DXWESApi"},
                    "/*/POST/workflows"
                    ]]}
            }
        }
    }
}
